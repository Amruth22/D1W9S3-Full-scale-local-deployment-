# Environment Configuration Template for Full-scale Local Deployment
# Copy this file to .env and customize for your deployment
# Or use JSON config files: config_dev.json, config_staging.json, config_prod.json

# ============================================================================
# ENVIRONMENT SELECTION
# ============================================================================
# Environment type (dev/staging/prod)
ENVIRONMENT=dev

# Port configuration for multi-server deployment
PORT=8080
MAIN_SERVER_PORT=8080
DIRECT_API_PORT=8081
PROXY_PORT=8000

# ============================================================================
# PERFORMANCE CONFIGURATION
# ============================================================================
# Worker threads for background processing
WORKER_THREADS=2

# Processing delay simulation (seconds)
PROCESSING_DELAY=0.5

# LRU Cache size (number of items)
CACHE_SIZE=1000

# Batch processing interval (seconds)
BATCH_INTERVAL=5

# ============================================================================
# DATABASE AND CONNECTION POOLING
# ============================================================================
# SQLite database file (port-specific isolation)
DATABASE_URL=library_system.db

# Connection pool settings
MIN_CONNECTIONS=3
MAX_CONNECTIONS=8

# Query timeout (seconds)
QUERY_TIMEOUT=30

# ============================================================================
# SLA MONITORING AND ALERTING
# ============================================================================
# SLA report generation interval (minutes)
SLA_REPORT_INTERVAL=15

# Response time SLA threshold (milliseconds)
SLA_RESPONSE_TIME_MS=2000

# System availability SLA target (percentage)
SLA_AVAILABILITY_TARGET=99.0

# Queue depth SLA limit
SLA_QUEUE_DEPTH_LIMIT=50

# Cache hit rate SLA target (percentage)
SLA_CACHE_HIT_RATE=70.0

# ============================================================================
# LOAD BALANCING CONFIGURATION
# ============================================================================
# Load balancing algorithm (round-robin/least-connections)
LOAD_BALANCE_ALGORITHM=round-robin

# Health check interval for servers (seconds)
HEALTH_CHECK_INTERVAL=30

# Server timeout for health checks (seconds)
SERVER_TIMEOUT=10

# ============================================================================
# LOGGING AND MONITORING
# ============================================================================
# Logging level (DEBUG/INFO/WARNING/ERROR/CRITICAL)
LOG_LEVEL=INFO

# Enable detailed request logging
DETAILED_LOGGING=false

# Enable performance metrics collection
METRICS_ENABLED=true

# ============================================================================
# TESTING CONFIGURATION
# ============================================================================
# Enable quick test mode for faster execution
QUICK_TEST_MODE=false

# Maximum API calls per test (for component testing)
MAX_API_CALLS_PER_TEST=0

# API call timeout in seconds
API_TIMEOUT=10

# Test server URLs
TEST_API_URL=http://localhost:8080
TEST_PROXY_URL=http://localhost:8000

# ============================================================================
# ENVIRONMENT-SPECIFIC EXAMPLES
# ============================================================================

# DEVELOPMENT ENVIRONMENT
# ENVIRONMENT=dev
# WORKER_THREADS=1
# PROCESSING_DELAY=0
# LOG_LEVEL=DEBUG
# CACHE_SIZE=500
# MIN_CONNECTIONS=2
# MAX_CONNECTIONS=5
# BATCH_INTERVAL=2
# SLA_REPORT_INTERVAL=5

# STAGING ENVIRONMENT
# ENVIRONMENT=staging
# WORKER_THREADS=2
# PROCESSING_DELAY=1
# LOG_LEVEL=INFO
# CACHE_SIZE=1000
# MIN_CONNECTIONS=3
# MAX_CONNECTIONS=8
# BATCH_INTERVAL=5
# SLA_REPORT_INTERVAL=15

# PRODUCTION ENVIRONMENT
# ENVIRONMENT=prod
# WORKER_THREADS=4
# PROCESSING_DELAY=0.5
# LOG_LEVEL=WARNING
# CACHE_SIZE=2000
# MIN_CONNECTIONS=5
# MAX_CONNECTIONS=10
# BATCH_INTERVAL=5
# SLA_REPORT_INTERVAL=30

# ============================================================================
# SETUP INSTRUCTIONS
# ============================================================================
# 1. Choose your configuration approach:
#    Option A: Environment variables (.env file)
#      cp .env.example .env
#      # Edit .env with your settings
#
#    Option B: JSON configuration files (recommended)
#      # Use existing config_dev.json, config_staging.json, config_prod.json
#      export ENVIRONMENT=dev    # or staging, prod
#      python main.py

# 2. Start the full-scale deployment:
#    python main.py
#    # This starts:
#    # - Main API Server (port 8080)
#    # - Direct API Server (port 8081)
#    # - Reverse Proxy Load Balancer (port 8000)

# 3. Access the system:
#    http://localhost:8000        # Load balanced entry point
#    http://localhost:8080        # Main server direct access
#    http://localhost:8081        # Direct API server
#    http://localhost:8000/docs   # API documentation
#    http://localhost:8000/sla    # SLA monitoring
#    http://localhost:8000/metrics # System metrics

# 4. Run tests:
#    python testsss.py                    # Component tests (fast)
#    python unit_test.py                  # Live API tests (requires servers)

# ============================================================================
# DEPLOYMENT MODES
# ============================================================================

# Full-scale Deployment (Recommended):
# export ENVIRONMENT=prod
# python main.py
# # Automatically starts all components

# Manual Multi-instance Setup:
# # Terminal 1: Main Server
# PORT=8080 ENVIRONMENT=prod python main.py
# # Terminal 2: Direct API
# PORT=8081 ENVIRONMENT=prod python main.py
# # Terminal 3: Load Balancer
# python reverse_proxy.py

# ============================================================================
# MONITORING AND OBSERVABILITY
# ============================================================================
# The system provides comprehensive monitoring:
# - /health          - Health check endpoint
# - /metrics         - System performance metrics
# - /sla             - SLA compliance status
# - sla_report.txt   - Automated SLA reports

# Load balancer statistics:
# - Request distribution tracking
# - Server health monitoring
# - Error rate calculation
# - Response time tracking

# ============================================================================
# PERFORMANCE OPTIMIZATION
# ============================================================================
# Key performance features:
# - LRU Cache for book availability data
# - Connection pooling for database efficiency
# - Batch processing for reservations
# - Background workers for async processing
# - Load balancing for request distribution
# - Database isolation for conflict prevention

# Performance targets:
# - Response time: < 2 seconds for basic operations
# - Cache hit rate: > 70%
# - System availability: > 99%
# - Queue depth: < 50 pending reservations

# ============================================================================
# TROUBLESHOOTING
# ============================================================================
# Common issues and solutions:

# Port conflicts:
# - Check port usage: netstat -ano | findstr :8080
# - Kill processes: taskkill /PID <pid> /F (Windows)
# - Use different ports in configuration

# Database issues:
# - Each server uses separate database files
# - Check file permissions
# - Verify SQLite installation

# Load balancer issues:
# - Ensure both API servers (8080, 8081) are running
# - Check proxy server logs
# - Verify network connectivity

# Performance issues:
# - Increase cache size in configuration
# - Adjust worker thread count
# - Optimize connection pool settings
# - Monitor SLA reports for bottlenecks

# Memory issues:
# - Reduce cache size
# - Decrease connection pool size
# - Monitor background worker count
# - Check for memory leaks in logs